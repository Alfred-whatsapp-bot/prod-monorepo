{"version":3,"file":"237.ef14bfd2a9f91e8e.js","mappings":"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","names":["UserProfileComponent","constructor","ngOnInit","selectors","i0","ApiConnectionService","http","this","baseUrl","environment","getHttpOptions","token","localStorage","getItem","headers","HttpHeaders","Authorization","getQrCode","get","getStatus","start","startBot","post","conversationName","order","stopBot","restart","getLogs","clearLogs","getConversation","getConnection","getMessage","sendMessage","body","getContatos","getTurmas","getMaterias","getAvaliacoes","factory","ModalComponent","dialogRef","data","onNoClick","close","onSaveClick","MAT_DIALOG_DATA","ctx","TableListComponent","service","dialog","subscribe","editRow","row","open","width","text","messageId","message_id","afterClosed","result","deleteRow","newMessage","value","error","reject","info","resolve","Promise","args","asyncGeneratorStep","_next","DashboardComponent","PaginaInicialComponent","sanitizer","apiConnectionSrv","router","events","event","NavigationStart","routePath","url","NavigationEnd","clearInterval","intervalLogs","intervalConnection","subscription","interval","period","scheduler","asyncScheduler","timer","connection","setInterval","_this","qr","qrCode","bypassSecurityTrustResourceUrl","base64Qr","loading","_this2","session","status","_this3","_this4","window","location","reload","restartBot","_this5","_this6","logs","handleTexts","_this7","conversation","_this8","show","showQrCode","idHtml","document","querySelector","innerHTML","includes","retHtml","replace","getElementById","ngOnDestroy","unsubscribe","TemplateMensagemComponent","response","userMessage","userMessagePlaceholder","formattedMessage","ctx_r25","$event","ctx_r29","AdminLayoutRoutes","path","component","ContatosComponent","MatTableDataSource","dataSource","SelectionModel","all","then","catch","console","ngAfterViewInit","paginator","res","toPromise","originalDataSource","turmas","materias","avaliacoes","applyFilters","filteredData","selectedTurma","filter","item","turma_nome","selectedAvaliacao","avaliacao_nome","selectedMateria","materia_nome","applyFilter","filterValue","trim","toLowerCase","enviarSelecionados","showConfirm","telefones","selection","selected","forEach","element","push","telefone","emMassa","enviarEmMassa","aluno","materia","nota","log","isAllSelected","length","masterToggle","clear","select","checkboxLabel","isSelected","position","toggleSelection","toggle","selectedCount","MatPaginator","AdminLayoutModule","CommonModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./src/app/pages/perfil/user-profile.component.ts","./src/app/pages/perfil/user-profile.component.html","./src/app/services/api-connection.service.ts","./src/app/components/modal/modal.component.html","./src/app/components/modal/modal.component.ts","./src/app/pages/produtos/table-list.component.html","./src/app/pages/produtos/table-list.component.ts","./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","./src/app/pages/dashboard/dashboard.component.ts","./src/app/pages/dashboard/dashboard.component.html","./src/app/pages/pagina-inicial/pagina-inicial.component.html","./src/app/pages/pagina-inicial/pagina-inicial.component.ts","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./src/app/pages/template-mensagem/template-mensagem.component.html","./src/app/pages/template-mensagem/template-mensagem.component.ts","./src/app/pages/contatos/contatos.component.html","./src/app/layouts/admin-layout/admin-layout.routing.ts","./src/app/pages/contatos/contatos.component.ts","./src/app/layouts/admin-layout/admin-layout.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  templateUrl: './user-profile.component.html',\r\n  styleUrls: ['./user-profile.component.scss']\r\n})\r\nexport class UserProfileComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<div class=\"main-content\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"form\">\r\n      <div class=\"form-body\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header card-header-danger\">\r\n            <h4 class=\"card-title\">Editar Perfil</h4>\r\n            <p class=\"card-category\">Atualize suas informações</p>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"col-md-4 profile-pic\">\r\n              <div class=\"card card-profile\">\r\n                <div class=\"card-avatar\">\r\n                  <img\r\n                    class=\"img\"\r\n                    src=\"./assets/img/faces/marc.jpg\"\r\n                    alt=\"fotoperfil\"\r\n                  />\r\n                </div>\r\n                <div class=\"card-body\">\r\n                  <h3\r\n                    class=\"card-title\"\r\n                    style=\"\r\n                      display: flex;\r\n                      align-items: center;\r\n                      justify-content: center;\r\n                    \"\r\n                  >\r\n                    Alec Thompson\r\n                    <a href=\"javascript:void(0)\" style=\"cursor: pointer\">\r\n                      <mat-icon\r\n                        aria-hidden=\"false\"\r\n                        aria-label=\"foto\"\r\n                        fontIcon=\"add_a_photo\"\r\n                      ></mat-icon>\r\n                    </a>\r\n                  </h3>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <form>\r\n              <div class=\"col-md-3\">\r\n                <mat-form-field class=\"example-full-width\">\r\n                  <input matInput placeholder=\"Nome\" />\r\n                </mat-form-field>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <mat-form-field class=\"example-full-width\">\r\n                  <input matInput placeholder=\"Email\" type=\"email\" />\r\n                </mat-form-field>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <mat-form-field class=\"example-full-width\">\r\n                  <input matInput placeholder=\"Telefone\" type=\"text\" />\r\n                </mat-form-field>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <mat-form-field class=\"example-full-width\">\r\n                  <input matInput placeholder=\"Endereço completo\" type=\"text\" />\r\n                </mat-form-field>\r\n              </div>\r\n              <button\r\n                mat-raised-button\r\n                type=\"submit\"\r\n                class=\"btn btn-danger pull-right\"\r\n              >\r\n                Atualizar\r\n              </button>\r\n              <div class=\"clearfix\"></div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { environment } from \"../../environments/environment\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ApiConnectionService {\r\n  baseUrl: string = \"\";\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.baseUrl = environment.urlApi;\r\n  }\r\n\r\n  private getHttpOptions() {\r\n    const token = localStorage.getItem(\"token\");\r\n    return {\r\n      headers: new HttpHeaders({\r\n        Authorization: `Bearer ${token}`,\r\n      }),\r\n    };\r\n  }\r\n\r\n  getQrCode() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/data`, this.getHttpOptions());\r\n  }\r\n\r\n  getStatus() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/data`, this.getHttpOptions());\r\n  }\r\n\r\n  start() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/controls/start`, this.getHttpOptions());\r\n  }\r\n\r\n  startBot() {\r\n    return this.http.post<any>(`${this.baseUrl}/api/handleBot`, { conversationName: localStorage.getItem(\"sessionName\"), order: \"start\" }, this.getHttpOptions());\r\n  }\r\n\r\n  stopBot() {\r\n    return this.http.post<any>(`${this.baseUrl}/api/handleBot`, { conversationName: localStorage.getItem(\"sessionName\"), order: \"stop\" }, this.getHttpOptions());\r\n  }\r\n\r\n  restart() {\r\n    return this.http.post<any>(`${this.baseUrl}/api/handleBot`, { conversationName: localStorage.getItem(\"sessionName\"), order: \"restart\" }, this.getHttpOptions());\r\n  }\r\n\r\n  getLogs() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/data`, this.getHttpOptions());\r\n  }\r\n\r\n  clearLogs() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/controls/log/clear`, this.getHttpOptions());\r\n  }\r\n\r\n  getConversation() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/data`, this.getHttpOptions());\r\n  }\r\n\r\n  getConnection() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/connection`, this.getHttpOptions());\r\n  }\r\n\r\n  getMessage() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/getmessage`, this.getHttpOptions());\r\n  }\r\n\r\n  sendMessage(body: any) {\r\n    return this.http.post<any>(`${this.baseUrl}/api/sendmessage`, body, this.getHttpOptions());\r\n  }\r\n\r\n  getContatos() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/getcontatos`, this.getHttpOptions());\r\n  }\r\n\r\n  getTurmas() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/getturmas`, this.getHttpOptions());\r\n  }\r\n\r\n  getMaterias() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/getmaterias`, this.getHttpOptions());\r\n  }\r\n\r\n  getAvaliacoes() {\r\n    return this.http.get<any>(`${this.baseUrl}/api/getavaliacoes`, this.getHttpOptions());\r\n  }\r\n}\r\n","<h1 mat-dialog-title class=\"text-center text-warning\">Atenção</h1>\r\n<div mat-dialog-content>\r\n  <h5 class=\"text-center\">\r\n    {{ data.text }}\r\n  </h5>\r\n</div>\r\n<div mat-dialog-actions class=\"d-flex justify-content-center\">\r\n  <button mat-button (click)=\"onNoClick()\" color=\"warning\">Cancelar</button>\r\n  <button mat-raised-button color=\"primary\" (click)=\"onSaveClick()\" [ngStyle]=\"{ color: '#fff' }\" *ngIf=\"data.showConfirm\">Confirmar</button>\r\n</div>\r\n","import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\n\r\nexport interface DialogData {\r\n  text: string;\r\n  showConfirm: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: \"app-modal\",\r\n  templateUrl: \"./modal.component.html\",\r\n  styleUrls: [\"./modal.component.css\"],\r\n})\r\nexport class ModalComponent implements OnInit {\r\n  constructor(public dialogRef: MatDialogRef<ModalComponent>, @Inject(MAT_DIALOG_DATA) public data: DialogData) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onSaveClick(): void {\r\n    this.dialogRef.close(this.data);\r\n  }\r\n}\r\n","<div class=\"main-content\">\r\n  <div class=\"container-fluid\">\r\n    <button mat-icon-button (click)=\"newMessage()\">\r\n      Nova mensagem\r\n      <mat-icon>add_box</mat-icon>\r\n    </button>\r\n    <table mat-table [dataSource]=\"data\">\r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"message\">\r\n        <th mat-header-cell *matHeaderCellDef>Mensagem</th>\r\n        <td mat-cell *matCellDef=\"let row\">{{ row.text }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Actions Column -->\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef>Ações</th>\r\n        <td mat-cell *matCellDef=\"let row\">\r\n          <button mat-icon-button (click)=\"editRow(row)\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button (click)=\"deleteRow(row)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n    </table>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { ApiConnectionService } from \"../../services/api-connection.service\";\r\nimport { MatDialog, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { ModalComponent } from \"app/components/modal/modal.component\";\r\n\r\nexport interface Message {\r\n  text: string;\r\n  message_id: number;\r\n}\r\n\r\n@Component({\r\n  selector: \"app-table-list\",\r\n  templateUrl: \"./table-list.component.html\",\r\n  styleUrls: [\"./table-list.component.scss\"],\r\n})\r\nexport class TableListComponent implements OnInit {\r\n  data: Message[] = [];\r\n\r\n  constructor(\r\n    private service: ApiConnectionService,\r\n    private dialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.service.getMessage().subscribe((data: Message[]) => {\r\n      this.data = data;\r\n    });\r\n  }\r\n\r\n  displayedColumns: string[] = [\"message\", \"actions\"];\r\n\r\n  editRow(row: Message) {\r\n    // Logic to edit the row goes here\r\n    const dialogRef = this.dialog.open(ModalComponent, {\r\n      width: \"400px\",\r\n      data: { text: row.text, messageId: row.message_id },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        row.text = result.text;\r\n        row.message_id = result.messageId;\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteRow(row: Message) {\r\n    // Logic to delete the row goes here\r\n  }\r\n\r\n  newMessage() {\r\n    // Logic to create a new message goes here\r\n  }\r\n}\r\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: \"app-dashboard\",\r\n  templateUrl: \"./dashboard.component.html\",\r\n  styleUrls: [\"./dashboard.component.css\"],\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  totalConversas = 0;\r\n  tempoMedioResposta = 0;\r\n  satisfacaoUsuarios = 0;\r\n  automacoesAtivas = 0;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n\r\n\r\n","<div class=\"dashboard-container\">\r\n  <div class=\"cards-grid\">\r\n    <!-- Card 1 -->\r\n    <div class=\"card\" [@fadeInUp]=\"'in'\" [style.animation-delay]=\"'0.1s'\">\r\n      <div class=\"card-icon\">\r\n        <i class=\"fas fa-comments\"></i>\r\n      </div>\r\n      <div class=\"card-content\">\r\n        <h3>Total Conversas</h3>\r\n        <p class=\"number\">{{ totalConversas }}</p>\r\n        <p class=\"trend positive\"><i class=\"fas fa-arrow-up\"></i> +5% desde ontem</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Card 2 -->\r\n    <div class=\"card\" [@fadeInUp]=\"'in'\" [style.animation-delay]=\"'0.2s'\">\r\n      <div class=\"card-icon\">\r\n        <i class=\"fas fa-clock\"></i>\r\n      </div>\r\n      <div class=\"card-content\">\r\n        <h3>Tempo Médio Resposta</h3>\r\n        <p class=\"number\">{{ tempoMedioResposta }}s</p>\r\n        <p class=\"trend negative\"><i class=\"fas fa-arrow-down\"></i> -2% desde ontem</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Card 3 -->\r\n    <div class=\"card\" [@fadeInUp]=\"'in'\" [style.animation-delay]=\"'0.3s'\">\r\n      <div class=\"card-icon\">\r\n        <i class=\"fas fa-smile\"></i>\r\n      </div>\r\n      <div class=\"card-content\">\r\n        <h3>Satisfação Usuários</h3>\r\n        <p class=\"number\">{{ satisfacaoUsuarios }}%</p>\r\n        <p class=\"trend positive\"><i class=\"fas fa-arrow-up\"></i> +1% desde ontem</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Card 4 -->\r\n    <div class=\"card\" [@fadeInUp]=\"'in'\" [style.animation-delay]=\"'0.4s'\">\r\n      <div class=\"card-icon\">\r\n        <i class=\"fas fa-robot\"></i>\r\n      </div>\r\n      <div class=\"card-content\">\r\n        <h3>Automações Ativas</h3>\r\n        <p class=\"number\">{{ automacoesAtivas }}</p>\r\n        <p class=\"trend neutral\"><i class=\"fas fa-minus\"></i> Sem alteração</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","<div class=\"hidden\" id=\"placeholder\"></div>\r\n<div class=\"main-content\">\r\n  <div class=\"container-fluid\">\r\n    <mat-tab-group animationDuration=\"1000ms\">\r\n      <mat-tab label=\"Controles\">\r\n        <div id=\"Controles\">\r\n          <br />\r\n          <div class=\"btn-group\">\r\n            <div *ngIf=\"status === null || status === undefined || status === 'notLogged'; else connected\">\r\n              <div *ngIf=\"!qrCode\">\r\n                <button mat-raised-button type=\"button\" class=\"btn btn-danger\" id=\"start\" (click)=\"startBot()\" id=\"start\">Conectar</button>\r\n              </div>\r\n              <div *ngIf=\"qrCode\" class=\"qr-container\">\r\n                <ol class=\"instructions-list\">\r\n                  <li class=\"instruction-item\">\r\n                    <div class=\"instruction-content\">Abra o WhatsApp no seu celular.</div>\r\n                  </li>\r\n                  <li class=\"instruction-item\">\r\n                    <div class=\"instruction-content\">\r\n                      Toque em <span class=\"highlight\">Mais opções</span> <span class=\"icon more-options-icon\"></span> no Android ou em <span class=\"highlight\">Configurações</span>\r\n                      <span class=\"icon settings-icon\"></span> no iPhone\r\n                    </div>\r\n                  </li>\r\n                  <li class=\"instruction-item\">\r\n                    <div class=\"instruction-content\">Toque em <span class=\"highlight\">Dispositivos conectados</span> e, em seguida, em <span class=\"highlight\">Conectar dispositivo</span>.</div>\r\n                  </li>\r\n                  <li class=\"instruction-item\">\r\n                    <div class=\"instruction-content\">Aponte seu celular para esta tela para escanear o QR code.</div>\r\n                  </li>\r\n                  <li class=\"instruction-item\">\r\n                    <div class=\"instruction-content\">Demorando para carregar o QR Code? Clique <button type=\"button\" class=\"btn btn-danger\" id=\"start\" (click)=\"restartBot()\" id=\"start\">Reiniciar</button></div>\r\n                  </li>\r\n                </ol>\r\n                <div *ngIf=\"loading\" class=\"spinner-container\">\r\n                  <mat-spinner></mat-spinner>\r\n                </div>\r\n                <div *ngIf=\"!loading\">\r\n                  <img [src]=\"qrCode\" alt=\"QR Code\" class=\"img-fluid\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <ng-template #connected>\r\n              <div class=\"status-card\" id=\"statusCard\">\r\n                <div class=\"status-header\">\r\n                  <div class=\"status-indicator\">\r\n                    <div class=\"status-icon\"></div>\r\n                    <span class=\"status-text\">Conectado com sucesso!</span>\r\n                  </div>\r\n                </div>\r\n                <div><button mat-raised-button type=\"button\" class=\"btn btn-warning\" id=\"stop\" (click)=\"stopBot()\">Desconectar</button></div>\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div></mat-tab\r\n      >\r\n      <mat-tab label=\"Conversas\"><div id=\"Conversas\"></div></mat-tab>\r\n      <mat-tab label=\"Logs\"> <div id=\"Logs\"></div></mat-tab>\r\n    </mat-tab-group>\r\n    <app-dashboard></app-dashboard>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { DomSanitizer, SafeUrl } from \"@angular/platform-browser\";\r\nimport { ApiConnectionService } from \"../../services/api-connection.service\";\r\nimport { Router, NavigationStart, NavigationEnd } from \"@angular/router\";\r\nimport { interval, Subscription } from \"rxjs\";\r\n\r\n@Component({\r\n  selector: \"app-pagina-inicial\",\r\n  templateUrl: \"./pagina-inicial.component.html\",\r\n  styleUrls: [\"./pagina-inicial.component.scss\"],\r\n})\r\nexport class PaginaInicialComponent implements OnInit, OnDestroy {\r\n  qrCode: SafeUrl;\r\n  showQrCode = false;\r\n  status: any;\r\n  logs: string;\r\n  routePath: string;\r\n  intervalLogs: any;\r\n  intervalConnection: any;\r\n  connection: string = \"DISCONNECTED\";\r\n  subscription: Subscription;\r\n  loading: boolean = false;\r\n\r\n  constructor(private sanitizer: DomSanitizer, private apiConnectionSrv: ApiConnectionService, private router: Router) {\r\n    this.router.events.subscribe((event) => {\r\n      if (event instanceof NavigationStart) {\r\n        this.routePath = event.url;\r\n      }\r\n    });\r\n    this.router.events.subscribe((event) => {\r\n      if (event instanceof NavigationEnd) {\r\n        clearInterval(this.intervalLogs);\r\n        clearInterval(this.intervalConnection);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getStatus();\r\n\r\n    this.subscription = interval(1000).subscribe(() => {\r\n      if (this.connection !== \"CONNECTED\") {\r\n        this.getQrCode();\r\n      }\r\n    });\r\n\r\n    this.intervalConnection = setInterval(() => {\r\n      this.getConnection();\r\n    }, 1000);\r\n\r\n    this.intervalLogs = setInterval(() => {\r\n      if (this.connection === \"CONNECTED\") {\r\n        this.getStatus();\r\n        this.getLogs();\r\n        this.getConversation();\r\n      }\r\n    }, 2000);\r\n  }\r\n\r\n  async getQrCode() {\r\n    this.apiConnectionSrv.getQrCode().subscribe((data) => {\r\n      if (data.qr) {\r\n        this.qrCode = this.sanitizer.bypassSecurityTrustResourceUrl(data.qr.base64Qr);\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  async getStatus() {\r\n    this.apiConnectionSrv.getStatus().subscribe((data) => {\r\n      if (data.session) this.status = data.session.status;\r\n    });\r\n  }\r\n\r\n  async startBot() {\r\n    this.loading = true;\r\n    this.apiConnectionSrv.startBot().subscribe();\r\n  }\r\n\r\n  async stopBot() {\r\n    this.apiConnectionSrv.stopBot().subscribe((data) => {\r\n      window.location.reload();\r\n    });\r\n  }\r\n\r\n  async restartBot() {\r\n    this.apiConnectionSrv.restart().subscribe((data) => {\r\n      window.location.reload();\r\n    });\r\n  }\r\n\r\n  async getLogs() {\r\n    this.apiConnectionSrv.getLogs().subscribe((data) => {\r\n      this.logs = data.logs;\r\n\r\n      if (data.logs !== \"\" || data.logs !== null) {\r\n        this.handleTexts(data.logs, \"Logs\");\r\n      }\r\n    });\r\n  }\r\n\r\n  async getConversation() {\r\n    this.apiConnectionSrv.getLogs().subscribe((data) => {\r\n      this.logs = data.conversation;\r\n\r\n      if (data.conversation !== \"\" || data.conversation !== null) {\r\n        this.handleTexts(data.conversation, \"Conversas\");\r\n      }\r\n    });\r\n  }\r\n\r\n  async getConnection() {\r\n    this.apiConnectionSrv.getConnection().subscribe((data) => {\r\n      this.connection = data.status;\r\n    });\r\n  }\r\n\r\n  show() {\r\n    this.showQrCode = true;\r\n  }\r\n\r\n  handleTexts(text: string, idHtml: string) {\r\n    const getTabSelected = document.querySelector(\"div[role='tab'][aria-selected=true] div\").innerHTML;\r\n    if (getTabSelected.includes(idHtml)) {\r\n      const retHtml = text\r\n        ? text\r\n            .replace(/\\[Receive\\]/g, \"<span class='bg-warning'>[Recebido]:</span>\")\r\n            .replace(/\\[Send\\]/g, \"<span class='bg-warning'>[Enviado]:</span>\")\r\n            .replace(/\\[Error\\]/g, \"<span class='red'>[Erro]:</span>\")\r\n            .replace(/\\[Start\\]/g, \"<span class='purple'>[Start]:</span>\")\r\n            .replace(/\\[Init\\]/g, \"<span class='purple'>[Iniciando]:</span>\")\r\n            .replace(/\\[Stop\\]/g, \"<span class='red'>[Parou]:</span>\")\r\n            .replace(/\\[Restart\\]/g, \"<span class='red'>[Reiniciou]:</span>\")\r\n            .replace(/\\[Reload\\]/g, \"<span class='red'>[Recarregou]:</span>\")\r\n            .replace(/\\[Job\\]/g, \"<span class='blue'>[Job]:</span>\")\r\n            .replace(/from:/g, \"<span class='white'>from:</span>\")\r\n            .replace(/to:/g, \"<span class='white'>to:</span>\")\r\n            .replace(/id:/g, \"<span class='white'>id:</span>\")\r\n            .replace(/parent:/g, \"<span class='white'>parent:</span>\")\r\n            .replace(/pattern:/g, \"<span class='white'>pattern:</span>\")\r\n            .replace(/input:/g, \"<span class='white'>input:</span>\")\r\n        : \"\";\r\n\r\n      if (idHtml !== null) {\r\n        const objDiv = document.getElementById(idHtml);\r\n        objDiv.innerHTML = retHtml;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","<div class=\"main-content\">\n  <div class=\"container-fluid\">\n    <ng-container *ngIf=\"loading; else content\">\n      <div class=\"spinner-container\">\n        <mat-spinner></mat-spinner>\n      </div>\n    </ng-container>\n    <ng-template #content>\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"form-container\">\n            <mat-form-field>\n              <mat-label>Modelo de mensagem</mat-label>\n              <textarea matInput [(ngModel)]=\"userMessage\" [maxlength]=\"300\" cdkTextareaAutosize cdkAutosizeMinRows=\"15\" cdkAutosizeMaxRows=\"20\"></textarea>\n            </mat-form-field>\n            <button mat-raised-button type=\"button\" class=\"btn btn-danger\" id=\"start\" id=\"alterar\">Alterar</button>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"chat-container\">\n            <div class=\"header\">\n              <div class=\"logo\">logo</div>\n              <div class=\"header-text\">INSTITUIÇÃO</div>\n            </div>\n            <div class=\"chat-content\">\n              <div class=\"message\" [innerHTML]=\"formattedMessage\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ApiConnectionService } from \"../../services/api-connection.service\";\n\n@Component({\n  selector: \"app-template-mensagem\",\n  templateUrl: \"./template-mensagem.component.html\",\n  styleUrls: [\"./template-mensagem.component.css\"],\n})\nexport class TemplateMensagemComponent implements OnInit {\n  userMessage: string = \"\";\n  userMessagePlaceholder: string = \"\";\n  loading: boolean = false;\n\n  constructor(private service: ApiConnectionService) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.service.getMessage().subscribe((response) => {\n      if (response) {\n        this.userMessage = response.text;\n        this.userMessagePlaceholder = response.text;\n        this.loading = false;\n      }\n    });\n  }\n\n  get formattedMessage(): string {\n    return this.userMessage.replace(/\\n/g, \"<br>\");\n  }\n}\n","<div class=\"main-content\">\n  <div class=\"container-fluid\">\n    <ng-container *ngIf=\"loading; else content\">\n      <div class=\"spinner-container\">\n        <mat-spinner></mat-spinner>\n      </div>\n    </ng-container>\n    <ng-template #content>\n      <div class=\"card mat-elevation-z8 p-2\">\n        <!-- <div class=\"col-6\">\n            <div class=\"alert alert-success\">\n              <i class=\"fa fa-info-circle\"></i>\n              <b class=\"font-weight-bolder\">Selecione os contatos marcando as caixas de seleção à esquerda antes de enviar a mensagem</b>\n            </div>\n          </div> -->\n        <div class=\"search-container row p-2\">\n          <div class=\"col-6\">\n            <mat-form-field appearance=\"standard\">\n              <mat-label>Buscar por Telefone</mat-label>\n              <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Digite para buscar\" />\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-6\">\n            <mat-form-field appearance=\"standard\">\n              <mat-label>Buscar por Avaliação</mat-label>\n              <mat-select [(ngModel)]=\"selectedAvaliacao\" placeholder=\"Selecione uma avaliação\">\n                <mat-option [value]=\"null\">Nenhuma</mat-option>\n                <mat-option *ngFor=\"let avaliacao of avaliacoes\" [value]=\"avaliacao.avaliacao_nome\">{{ avaliacao.avaliacao_nome }}</mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div>\n        </div>\n\n        <div class=\"filter-container row p-2\">\n          <div class=\"col-6\">\n            <mat-form-field appearance=\"standard\">\n              <mat-label>Filtrar por Turma</mat-label>\n              <mat-select [(ngModel)]=\"selectedTurma\" placeholder=\"Selecione uma turma\">\n                <mat-option [value]=\"null\">Nenhuma</mat-option>\n                <mat-option *ngFor=\"let turma of turmas\" [value]=\"turma.turma_nome\">{{ turma.turma_nome }}</mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-6\">\n            <mat-form-field appearance=\"standard\">\n              <mat-label>Filtrar por Matéria</mat-label>\n              <mat-select [(ngModel)]=\"selectedMateria\" placeholder=\"Selecione uma matéria\">\n                <mat-option [value]=\"null\">Nenhuma</mat-option>\n                <mat-option *ngFor=\"let materia of materias\" [value]=\"materia.materia_nome\">{{ materia.materia_nome }}</mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div>\n        </div>\n\n        <div class=\"d-flex row p-2 justify-content-xl-between\">\n          <div class=\"col-3\">\n            <button mat-raised-button color=\"primary\" (click)=\"applyFilters()\">Pesquisar</button\n            ><button mat-raised-button (click)=\"enviarSelecionados()\" class=\"m-1 btn-success\">Enviar Mensagem ({{ this.selectedCount }})</button>\n          </div>\n          <!-- <div class=\"col-3\">\n              <button mat-raised-button color=\"accent\" (click)=\"enviarEmMassa()\" class=\"m-1\">Enviar em Massa</button>\n            </div> -->\n        </div>\n      </div>\n      <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8 table table-hover\">\n        <!-- Checkbox Column -->\n        <ng-container matColumnDef=\"select\">\n          <th mat-header-cell *matHeaderCellDef>\n            <mat-checkbox (change)=\"$event ? masterToggle() : null\" [checked]=\"selection.hasValue() && isAllSelected()\" [indeterminate]=\"selection.hasValue() && !isAllSelected()\"></mat-checkbox>\n          </th>\n          <td mat-cell *matCellDef=\"let element\">\n            <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"$event ? toggleSelection(element) : null\" [checked]=\"selection.isSelected(element)\"> </mat-checkbox>\n          </td>\n        </ng-container>\n\n        <!-- Telefone Column -->\n        <ng-container matColumnDef=\"telefone\">\n          <th mat-header-cell *matHeaderCellDef>Telefone</th>\n          <td mat-cell *matCellDef=\"let element\">{{ element.telefone }}</td>\n        </ng-container>\n\n        <!-- Aluno Column -->\n        <ng-container matColumnDef=\"aluno_nome\">\n          <th mat-header-cell *matHeaderCellDef>Aluno</th>\n          <td mat-cell *matCellDef=\"let element\">{{ element.aluno_nome }}</td>\n        </ng-container>\n\n        <!-- Materia Column -->\n        <ng-container matColumnDef=\"materia_nome\">\n          <th mat-header-cell *matHeaderCellDef>Matéria</th>\n          <td mat-cell *matCellDef=\"let element\">{{ element.materia_nome }}</td>\n        </ng-container>\n\n        <!-- Nota Column -->\n        <ng-container matColumnDef=\"nota\">\n          <th mat-header-cell *matHeaderCellDef>Nota</th>\n          <td mat-cell *matCellDef=\"let element\">{{ element.nota }}</td>\n        </ng-container>\n\n        <!-- Avaliacao Column -->\n        <ng-container matColumnDef=\"avaliacao_nome\">\n          <th mat-header-cell *matHeaderCellDef>Avaliação</th>\n          <td mat-cell *matCellDef=\"let element\">{{ element.avaliacao_nome }}</td>\n        </ng-container>\n\n        <!-- Turma Column -->\n        <ng-container matColumnDef=\"turma_nome\">\n          <th mat-header-cell *matHeaderCellDef>Turma</th>\n          <td mat-cell *matCellDef=\"let element\">{{ element.turma_nome }}</td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n      </table>\n      <mat-paginator [length]=\"dataSource.data.length\" [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n    </ng-template>\n  </div>\n</div>\n","import { Routes } from \"@angular/router\";\r\n\r\nimport { UserProfileComponent } from \"../../pages/perfil/user-profile.component\";\r\nimport { TableListComponent } from \"../../pages/produtos/table-list.component\";\r\nimport { PaginaInicialComponent } from \"app/pages/pagina-inicial/pagina-inicial.component\";\r\nimport { DashboardComponent } from \"app/pages/dashboard/dashboard.component\";\r\nimport { TemplateMensagemComponent } from \"app/pages/template-mensagem/template-mensagem.component\";\r\nimport { ContatosComponent } from \"app/pages/contatos/contatos.component\";\r\n\r\nexport const AdminLayoutRoutes: Routes = [\r\n  { path: \"home\", component: PaginaInicialComponent },\r\n  { path: \"perfil\", component: UserProfileComponent },\r\n  { path: \"produtos\", component: TableListComponent },\r\n  { path: \"dashboard\", component: DashboardComponent },\r\n  { path: \"template\", component: TemplateMensagemComponent },\r\n  { path: \"envios\", component: ContatosComponent },\r\n];\r\n","import { Component, OnInit, ViewChild, AfterViewInit } from \"@angular/core\";\nimport { SelectionModel } from \"@angular/cdk/collections\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { ApiConnectionService } from \"app/services/api-connection.service\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { ModalComponent } from \"app/components/modal/modal.component\";\n\n@Component({\n  selector: \"app-contatos\",\n  templateUrl: \"./contatos.component.html\",\n  styleUrls: [\"./contatos.component.css\"],\n})\nexport class ContatosComponent implements OnInit, AfterViewInit {\n  displayedColumns: string[] = [\"select\", \"telefone\", \"aluno_nome\", \"materia_nome\", \"avaliacao_nome\", \"nota\", \"turma_nome\"];\n  dataSource = new MatTableDataSource<any>([]);\n  originalDataSource = this.dataSource.data;\n  selection = new SelectionModel<any>(true, []);\n  turmas: any[] = [];\n  materias: any[] = [];\n  avaliacoes: any[] = [];\n  selectedTurma: any = null;\n  selectedAvaliacao: any = null;\n  selectedMateria: any = null;\n  loading: boolean = true;\n  selectedCount: number = 0;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(private service: ApiConnectionService, private dialog: MatDialog) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    Promise.all([this.getContatos(), this.getTurmas(), this.getMaterias(), this.getAvaliacoes()])\n      .then(() => {\n        this.loading = false;\n      })\n      .catch((error) => {\n        console.error(\"Erro ao carregar dados:\", error);\n        this.loading = false;\n      });\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n  }\n\n  async getContatos() {\n    const res = await this.service.getContatos().toPromise();\n    this.dataSource.data = res;\n    this.originalDataSource = res;\n  }\n\n  async getTurmas() {\n    const res = await this.service.getTurmas().toPromise();\n    this.turmas = res;\n  }\n\n  async getMaterias() {\n    const res = await this.service.getMaterias().toPromise();\n    this.materias = res;\n  }\n\n  async getAvaliacoes() {\n    const res = await this.service.getAvaliacoes().toPromise();\n    this.avaliacoes = res;\n  }\n\n  applyFilters() {\n    let filteredData = [...this.originalDataSource];\n\n    if (this.selectedTurma) {\n      filteredData = filteredData.filter((item) => item.turma_nome === this.selectedTurma.turma_nome);\n    }\n\n    if (this.selectedAvaliacao) {\n      filteredData = filteredData.filter((item) => item.avaliacao_nome === this.selectedAvaliacao.avaliacao_nome);\n    }\n\n    if (this.selectedMateria) {\n      filteredData = filteredData.filter((item) => item.materia_nome === this.selectedMateria.materia_nome);\n    }\n\n    this.dataSource.data = filteredData;\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  enviarSelecionados() {\n    const dialogRef = this.dialog.open(ModalComponent, {\n      width: \"450px\",\n      data: { text: \"Você enviará apenas para os contatos selecionados.\", showConfirm: true },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        let telefones = [];\n        const selecionados = this.selection.selected;\n        selecionados.forEach((element) => {\n          telefones.push(element.telefone);\n        });\n\n        const body = { emMassa: false, telefones: telefones };\n        this.service.sendMessage(body).subscribe((res) => {});\n      }\n    });\n  }\n\n  enviarEmMassa() {\n    this.dataSource.data.forEach((element) => {\n      const body = { telefone: element.telefone, aluno: element.aluno, materia: element.materia, nota: element.nota };\n      this.service.sendMessage(body).subscribe((res) => {\n        console.log(`Enviado: ${element.telefone}`);\n      });\n    });\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  masterToggle() {\n    this.isAllSelected() ? this.selection.clear() : this.dataSource.data.forEach((row) => this.selection.select(row));\n  }\n\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"select\" : \"deselect\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1}`;\n  }\n\n  toggleSelection(element: any) {\n    this.selection.toggle(element);\n    this.selectedCount = this.selection.selected.length;\n  }\n}\n","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { AdminLayoutRoutes } from \"./admin-layout.routing\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RouterModule.forChild(AdminLayoutRoutes)],\r\n  declarations: [],\r\n})\r\nexport class AdminLayoutModule {}\r\n"],"x_google_ignoreList":[7,12]}